🛡️ Laravel Google Authentication API (Simple Documentation)
This API lets users log in using their Google account. It uses Firebase to verify Google ID tokens and Laravel Sanctum to generate access tokens.

🔗 What This API Does
✅ Accepts a Google ID token from the frontend (mobile or web).
✅ Verifies the token with Firebase.
✅ Checks if the user already exists:
 • If yes, log them in.
 • If no, register them first.
✅ Returns an access token and a refresh token to the client.

📮 API Endpoint
POST /api/auth/google
This is the main endpoint you call from your app.

📥 Request Example
Send this from your frontend (e.g., mobile app or JavaScript frontend):

json
Copy
Edit
{
  "google_id_token": "your_id_token_here"
}
🔐 You get this token after a user logs in with Google on the frontend (via Firebase).

📤 Responses
✅ Existing User (Login)
json
Copy
Edit
{
  "status": "existing_user",
  "message": "Login successful",
  "access_token": "ACCESS_TOKEN_HERE",
  "refresh_token": "REFRESH_TOKEN_HERE"
}
🆕 New User
json
Copy
Edit
{
  "status": "new_user",
  "message": "Google verified. Complete registration.",
  "access_token": "ACCESS_TOKEN_HERE",
  "refresh_token": "REFRESH_TOKEN_HERE"
}
❌ Invalid Token
json
Copy
Edit
{
  "error": "Google authentication failed",
  "details": "Token verification failed"
}
⚙️ How It Works (Behind the Scenes)
1. The frontend sends a google_id_token.
2. Laravel verifies the token using Firebase.
3. If the token is valid:
Checks if the user is already in the database.

If not, it creates a new user.

Then it creates a Sanctum access token and refresh token.

4. Sends back a response to the frontend with the tokens.
🔐 Security Features
✅ Sanitization – Cleans up user data like email and name.
✅ Rate Limiting – Limits how often an IP can hit the endpoint (60 times per minute).
✅ CORS – Allows frontend apps on different domains to access the API.

🧪 How to Test It
Get a Google ID Token:

Use Firebase Authentication in your frontend.

Once the user logs in with Google, get the ID token.

Use Postman or Insomnia:

Method: POST

URL: http://localhost:8000/api/auth/google

Body:

json
Copy
Edit
{
  "google_id_token": "paste_your_token_here"
}
🛠️ Laravel Setup Checklist (Backend Developer)
✅ Install Sanctum:

bash
Copy
Edit
composer require laravel/sanctum
php artisan vendor:publish --provider="Laravel\Sanctum\SanctumServiceProvider"
php artisan migrate
✅ Create the GoogleAuthController:
Handles token verification and user login/registration.

✅ Add Sanctum and CORS middleware in bootstrap/app.php.

✅ Add this route in routes/api.php:

php
Copy
Edit
Route::post('/auth/google', [GoogleAuthController::class, 'authenticate']);
✅ Use firebase/php-jwt package for verifying the Google token:

bash
Copy
Edit
composer require firebase/php-jwt
💡 Notes
Sanctum stores tokens in the personal_access_tokens table.

Access tokens are needed to authenticate requests to protected API routes.

Refresh tokens can be used to generate new access tokens later.

📝 Example Use Case (Mobile App)
User taps “Sign in with Google”.

Firebase handles login and gives you a google_id_token.

You send that token to this Laravel API.

The API verifies the token, finds or creates the user, and sends back an access_token.

You use the token to access secure routes in the app.

📦 Output Files (For Developers)
GoogleAuthController.php – Main logic for auth

.env – Must include Firebase project details (if needed)

routes/api.php – Route for /api/auth/google

Insomnia_Export.json – (Optional) Test API with Insomnia workspace

✅ Summary
Super easy login with Google

Works with mobile or web

Uses Firebase to verify tokens

Generates Laravel tokens for secure access

Safe and secure (with CORS, rate limits, input checks)

